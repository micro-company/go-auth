.best_practices: &best_practices
  type: best_practices
  image: golang:1.18.1-alpine
  before_script:
  - apk add --no-cache git
  only:
  - tags
  allow_failure: true

.job_template_build: &job_build
  type: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  except:
  - branches
  when: on_success

.job_template_deploy: &job_deploy
  type: deploy
  variables:
    GIT_STRATEGY: none
  script:
  - helm --kube-context $KUBE_CONTEXT upgrade $RELEASE_NAME $HELM_PATH
    --install
    --force
    --wait
    --namespace=$PROJECT_NAMESPACE;
  except:
  - branches
  when: manual

image: docker:latest

services:
- docker:dind

cache:
  paths:
  - /apt-cache
  - /go/src/github.com
  - /go/src/golang.org
  - /go/src/google.golang.org
  - /go/src/gopkg.in

variables:
  GITHUB_PATH: gitlab.com/batazor
  PROJECT_NAMESPACE: micro-company
  RELEASE_NAME: $CI_PROJECT_NAME
  HELM_PATH: ops/Helm/go-auth

stages:
- best_practices
- build
- deploy

before_script:
  - mkdir -p /go/src/$GITHUB_PATH /go/src/_/builds
  - cp -r $CI_PROJECT_DIR /go/src/$GITHUB_PATH/$CI_PROJECT_NAME
  - ln -s /go/src/$GITHUB_PATH/$CI_PROJECT_NAME /go/src/_/builds/$CI_PROJECT_NAME

postman:
  type: best_practices
  image: node:18.1.0-alpine
  before_script:
  - npm install -g newman
  script:
  - newman run tests/go-auth.postman_collection.json -e tests/go-auth.postman_environment.json
  only:
  - tags
  allow_failure: true

lint:
  <<: *best_practices
  script:
  - go get -u github.com/golang/lint/golint
  - golint -set_exit_status $(go list ./... | grep -v /vendor/)

unit test:
  <<: *best_practices
  script:
  - go test -short $(go list ./... | grep -v /vendor/)

data race:
  <<: *best_practices
  script:
  - go test -race -short $(go list ./... | grep -v /vendor/)

build:staging:
  <<: *job_build
  before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
  - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
  - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
  - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)-rc(?:0|[1-9]\d*)$/

deploy:staging:
  <<: *job_deploy
  variables:
    KUBE_CONTEXT: staging
  environment:
    name: staging
    url: https://auth.example.com
  only:
  - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)-rc(?:0|[1-9]\d*)$/

build:production:
  <<: *job_build
  before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
  - docker build -t $CI_REGISTRY_IMAGE .
  - docker push $CI_REGISTRY_IMAGE
  - docker build -t $CI_REGISTRY_IMAGE:$CI_BUILD_TAG .
  - docker push $CI_REGISTRY_IMAGE:$CI_BUILD_TAG
  only:
  - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.?(?:0|[1-9]\d*)?$/

deploy:production:
  <<: *job_deploy
  variables:
    KUBE_CONTEXT: production
  environment:
    name: $CI_ENVIRONMENT_NAME
    url: https://auth.example.com
  only:
  - /^(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.?(?:0|[1-9]\d*)?$/
